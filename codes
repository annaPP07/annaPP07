Блочная (корзинная) сортировка

def bucket_sort(arr):
    # Если массив пуст или состоит всего из одного элемента,
    # значит он уже отсортирован
    if len(arr) <= 1:
        return arr
    
    # Определяем минимальное и максимальное значения в массиве
    min_val = min(arr)
    max_val = max(arr)
    
    # Вычисляем количество корзин исходя из размера массива
    num_buckets = len(arr)
    
    # Создаем список корзин (каждая корзина изначально пустая)
    buckets = [[] for _ in range(num_buckets)]
    
    # Рассчитываем диапазон каждого интервала корзины
    interval_range = (max_val - min_val + 1) / float(num_buckets)
    
    # Распределяем элементы по корзинам
    for value in arr:
        index = int((value - min_val) // interval_range)
        
        # Проверяем крайний случай, чтобы избежать выхода за границы индекса
        if index >= num_buckets:
            index -= 1
            
        # Добавляем значение в нужную корзину
        buckets[index].append(value)
    
    # Сортируем каждую корзину отдельно встроенной функцией sorted()
    sorted_arr = []
    for bucket in buckets:
        sorted_bucket = sorted(bucket)
        sorted_arr.extend(sorted_bucket)
    
    return sorted_arr


# Пример использования
if __name__ == "__main__":
    unsorted_array = [89, 45, 68, 90, 29, 34, 17]
    print("Исходный массив:", unsorted_array)
    sorted_array = bucket_sort(unsorted_array)
    print("Отсортированный массив:", sorted_array)

Исходный массив: [89, 45, 68, 90, 29, 34, 17]
Отсортированный массив: [17, 29, 34, 45, 68, 89, 90]
