Сортировка выбором

#include <iostream> // Подключаем библиотеку ввода-вывода

// Функция для вывода массива на экран
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {   // Проходим по каждому элементу массива
        std::cout << arr[i] << " ";     // Выводим значение элемента
    }
    std::cout << "\n";                 // Переход на новую строку после печати всех элементов
}

// Основная функция сортировки выбором
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {          // Внешний цикл проходит по массиву, уменьшая область несортированных элементов
        int minIndex = i;                      // Запоминаем индекс текущего минимального элемента
        
        // Внутренний цикл ищет минимальный элемент среди оставшихся несортированных элементов
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[minIndex]) {      // Если найден меньший элемент, обновляем индекс минимального элемента
                minIndex = j;
            }
        }
        
        // Меняем местами текущий элемент с минимальным элементом
        if (minIndex != i) {                   // Проверяем, действительно ли нашли новый минимум
            std::swap(arr[i], arr[minIndex]);  // Обмен значений
        }
    }
}

// Главная функция программы
int main() {
    int array[] = {64, 25, 12, 22, 11};       // Пример исходного массива
    int size = sizeof(array)/sizeof(array[0]); // Вычисление размера массива (количество элементов)
    
    std::cout << "Исходный массив:\n";
    printArray(array, size);                  // Печать исходного массива
    
    selectionSort(array, size);               // Выполняем сортировку
    
    std::cout << "Отсортированный массив:\n";
    printArray(array, size);                  // Печать отсортированного массива
    
    return 0;                                 // Завершаем программу успешно
}

Сортировка слиянием

#include <iostream>
using namespace std;

// Вспомогательная функция для объединения двух отсортированных подмассивов
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;        // Размер левого подмассива
    int n2 = right - mid;           // Размер правого подмассива

    // Создание временных массивов для хранения разделённых частей
    int L[n1], R[n2];

    // Копирование данных в временные массивы
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];        // Левая половина
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];    // Правая половина

    // Индексы для левой и правой половин
    int i = 0, j = 0;
    int k = left;                   // Текущий индекс результирующего массива

    // Объединение двух подмассивов обратно в исходный массив
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {          // Если левый элемент меньше или равен правому
            arr[k++] = L[i++];       // Добавляем левый элемент и двигаем указатель вперед
        } else {
            arr[k++] = R[j++];       // Иначе добавляем правый элемент
        }
    }

    // Остаточные элементы из левой половины
    while (i < n1) {
        arr[k++] = L[i++];
    }

    // Остаточные элементы из правой половины
    while (j < n2) {
        arr[k++] = R[j++];
    }
}

// Рекурсивная функция сортировки слиянием
void mergeSort(int arr[], int left, int right) {
    if (left < right) {                           // Если есть что сортировать
        int mid = left + (right - left) / 2;      // Нахождение середины подмассива
        mergeSort(arr, left, mid);                // Рекурсивно сортируем левую половину
        mergeSort(arr, mid + 1, right);           // Рекурсивно сортируем правую половину
        merge(arr, left, mid, right);             // Объединяем обе половины
    }
}

// Основная функция для запуска сортировки
int main() {
    int arr[] = {38, 27, 43, 3, 9, 82, 10};     // Исходный массив
    int n = sizeof(arr) / sizeof(arr[0]);         // Получаем размер массива

    cout << "Исходный массив: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    mergeSort(arr, 0, n - 1);                    // Вызов рекурсивной сортировки

    cout << "Отсортированный массив: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
