Сортировка выбором
#include <iostream> // Подключаем стандартную библиотеку ввода-вывода

// Функция для вывода массива элементов
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {       // Проходим по каждому элементу массива
        std::cout << arr[i] << " ";        // Выводим значение элемента
    }
    std::cout << "\n";                     // Перенос строки для удобства чтения
}

// Основная функция сортировки выбором
void selectionSort(int arr[], int n) {
    int minIndex;                          // Переменная для хранения индекса минимального элемента
    
    // Внешний цикл проходит по массиву от начала до предпоследнего элемента
    for (int i = 0; i < n - 1; ++i) {
        
        // Предполагаемм, что первый элемент текущего участка массива минимальный
        minIndex = i;
        
        // Внутренний цикл ищет минимальное значение среди оставшихся элементов
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[minIndex]) {  // Если нашли меньший элемент, обновляем индекс минимального
                minIndex = j;
            }
        }
        
        // Меняем местами найденный минимум с первым элементом текущего участка
        if (minIndex != i) {
            std::swap(arr[i], arr[minIndex]);   // Используем встроенную функцию swap() для перестановки значений
        }
    }
}

// Главная функция программы
int main() {
    int array[] = {64, 25, 12, 22, 11};   // Исходный несортированный массив
    int size = sizeof(array)/sizeof(array[0]); // Вычисляем размер массива
    
    std::cout << "Исходный массив:\n";
    printArray(array, size);               // Выводим исходный массив
    
    selectionSort(array, size);            // Сортируем массив методом выбора
    
    std::cout << "Отсортированный массив:\n";
    printArray(array, size);               // Выводим отсортированный массив
    
    return 0;                              // Завершаем программу успешно
