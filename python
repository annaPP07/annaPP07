Сортировка обменом (пузырьком)

def bubble_sort(arr):
    """
    Реализует алгоритм сортировки пузырьком.
    :param arr: список целых чисел
    :return: None (сортирует список на месте)
    """
    n = len(arr)                     # Определяем длину списка
    for i in range(n):               # Внешний цикл проходит по всем элементам списка
        swapped = False              # Флаг, позволяющий отслеживать наличие перестановок
        for j in range(0, n-i-1):    # Внутренний цикл проходит по списку, исключая уже упорядоченные элементы
            if arr[j] > arr[j+1]:   # Если текущий элемент больше следующего
                arr[j], arr[j+1] = arr[j+1], arr[j]  # Меняем их местами
                swapped = True       # Устанавливаем флаг, что произошла перестановка
        if not swapped:              # Если перестановок не было, значит массив уже отсортирован
            break                    # Прерываем выполнение внешнего цикла

# Пример использования
array = [64, 34, 25, 12, 22, 11, 90]
print("Исходный массив:", array)
bubble_sort(array)                  # Применяем сортировку
print("Отсортированный массив:", array)


Сортировка вставками

def insertion_sort(arr):
    """
    Реализует алгоритм сортировки вставками.
    :param arr: Список целочисленных элементов
    :return: None (сортирует список на месте)
    """
    n = len(arr)                          # Получаем длину входящего списка
    for i in range(1, n):                 # Начинаем обход списка с второго элемента
        key = arr[i]                      # Берём текущий элемент, который будем вставлять
        j = i - 1                         # Индекс предыдущего элемента
        while j >= 0 and arr[j] > key:    # Пока есть предыдущие элементы и они больше текущего ключа
            arr[j + 1] = arr[j]           # Сдвигаем больший элемент вправо
            j -= 1                        # Двигаясь назад по списку
        arr[j + 1] = key                  # Ставим ключ на его правильное место

# Пример использования
array = [12, 11, 13, 5, 6]
print("Исходный массив:", array)
insertion_sort(array)                     # Сортируем массив
print("Отсортированный массив:", array)


Сортировка Шелла 
def shell_sort(arr):
    """
    Реализует алгоритм сортировки Шелла.
    :param arr: Список целых чисел
    :return: Отсортированный список
    """
    gap = len(arr) // 2  # Начальное расстояние между элементами (шаг)

    # Продолжаем уменьшать шаг, пока он не достигнет нуля
    while gap > 0:
        # Просматриваем массив, начиная с элемента на расстоянии 'gap' от начала
        for i in range(gap, len(arr)):
            temp = arr[i]  # Сохраняем текущий элемент
            
            # Смещаем элементы, которые больше текущего, на 'gap' позиций вправо,
            # чтобы освободить место для вставки текущего элемента
            j = i
            while j >= gap and arr[j-gap] > temp:
                arr[j] = arr[j-gap]
                j -= gap
                
            # Вставляем текущий элемент на свободное место
            arr[j] = temp
        
        # Уменьшаем шаг в два раза для следующей итерации
        gap //= 2

# Пример использования
array = [64, 34, 25, 12, 22, 11, 90]
shell_sort(array)
print("Отсортированный массив:", array)
